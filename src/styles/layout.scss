$count: 100;

// Layout
// display
@each $val in (hidden, grid, flex, inline, inline-block, block) {
  .#{$val} {
    display: $val;
  }
}

// top, right, left, bottom
@each $val in (top, right, left, bottom) {
  @for $i from 0 through $count {
    .#{$val}-#{$i} {
      #{$val}: #{$i}px;
    }
  }
}

// position
@each $val in (static, fixed, absolute, relative, sticky) {
  .#{$val} {
    position: $val;
  }
}

// z-index
@each $val in (0, 10, 20, 30, auto) {
  .z-#{$val} {
    z-index: $val;
  }
}

.overflow-hidden {
  overflow: hidden;
}

.overflow-scroll {
  overflow: scroll;
}

.overflow-x-auto {
  overflow-x: auto;
}

.overflow-y-auto {
  overflow-y: auto;
}

.overflow-x-scroll {
  overflow-x: scroll;
}

.overflow-y-scroll {
  overflow-y: scroll;
}

.visible {
  visibility: visible;
}

.invisible {
  visibility: hidden;
}

// Flexbox & Grid
.flex-1 {
  flex: 1 1 0%;
}

.flex-auto {
  flex: 1 1 auto;
}

.flex-initial {
  flex: 0 1 auto;
}

.flex-none {
  flex: none;
}

.grow {
  flex-grow: 1;
}

.grow-0 {
  flex-grow: 0;
}

.shrink {
  flex-shrink: 1;
}

.shrink-0 {
  flex-shrink: 0;
}

// justify-content align-content
@each $val in (start, end, center, space-between, space-around, space-evenly) {
  .justify-#{$val} {
    justify-content: $val;
  }

  .content-#{$val} {
    align-content: $val;
  }
}

// justify-content
@each $val in (start, end, center, stretch) {
  .justify-self-#{$val} {
    justify-self: $val;
  }

  .justify-items-#{$val} {
    justify-self: $val;
  }
}

// align-self
@each $val in (flex-start, flex-end, center, stretch, baseline) {
  .self-#{$val} {
    align-self: $val;
  }

  .items-#{$val} {
    align-items: $val;
  }
}

// Spacing
$spacing-types: (
  m: margin,
  p: padding,
);
$spacing-directions: (
  t: top,
  r: right,
  b: bottom,
  l: left,
);
$spacing-base-size: 1px;

/*
 margin padding
 eg: .m-1 .my-1 .mx-1 .mt-1, .mr-1...
 */
@each $typeKey,
$type in $spacing-types {
  @for $i from 1 through $count {
    .#{$typeKey}-#{$i} {
      #{$type}: $spacing-base-size * $i;
    }

    .#{$typeKey}x-#{$i} {
      #{$type}-left: $i * $spacing-base-size;
      #{$type}-right: $i * $spacing-base-size;
    }

    .#{$typeKey}y-#{$i} {
      #{$type}-top: $i * $spacing-base-size;
      #{$type}-bottom: $i * $spacing-base-size;
    }
  }

  @each $directionKey,
  $direction in $spacing-directions {
    @for $i from 1 through $count {

      // .mt-1{margin-top: 0.25rem}
      .#{$typeKey}#{$directionKey}-#{$i} {
        #{$type}-#{$direction}: $i * $spacing-base-size;
      }
    }
  }
}

// sizing
$sizing-types: (
  w: width,
  min-w: min-width,
  max-w: max-width,
  h: height,
  min-h: min-height,
  max-h: max-height,
);

/*
  width, min-width, max-width, height, min-height, max-height
  eg: .w-1 .min-w-1 .max-w-1 w-full ...
 */
@each $typeKey,
$type in $sizing-types {
  .#{$typeKey}-full {
    #{$type}: 100%;
  }

  @for $i from 1 through $count {
    .#{$typeKey}-#{$i} {
      #{$type}: $spacing-base-size * $i;
    }
  }
}

// Typography
// font-size line-height
@for $i from 1 through $count {
  .text-#{$i} {
    font-size: #{$i}px;
    line-height: #{$i}px;
  }

  .leading-#{$i} {
    line-height: #{$i}px;
  }
}

.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.text-ellipsis {
  text-overflow: ellipsis;
}

.text-clip {
  text-overflow: clip;
}

.font-normal {
  font-weight: 400;
}

.font-medium {
  font-weight: 500;
}

.font-semibold {
  font-weight: 600;
}

.font-bold {
  font-weight: 700;
}

// white-space
@each $val in (pre-wrap, pre-line, pre, nowrap, normal) {
  .whitespace-#{$val} {
    white-space: $val;
  }
}

// vertical-align
@each $val in (super, sub, text-bottom, text-top, bottom, middle, top, baseline) {
  .align-#{$val} {
    vertical-align: $val;
  }
}

.break-normal {
  word-break: normal;
  overflow-wrap: normal;
}

.break-words {
  overflow-wrap: break-word;
}

.break-all {
  word-break: break-all;
}

// text-left text-center text-right
@each $val in (left, center, right) {
  .text-#{$val} {
    text-align: $val;
  }
}

// Borders
@for $i from 1 through $count {
  .rounded-#{$i} {
    border-radius: #{$i}px;
  }

  .border-#{$i} {
    border-width: #{$i}px;
  }

  .border-y-#{$i} {
    border-top-width: #{$i}px;
    border-bottom-width: #{$i}px;
  }

  .border-x-#{$i} {
    border-right-width: #{$i}px;
    border-left-width: #{$i}px;
  }

  .border-t-#{$i} {
    border-top-width: #{$i}px;
  }

  .border-b-#{$i} {
    border-bottom-width: #{$i}px;
  }

  .border-r-#{$i} {
    border-right-width: #{$i}px;
  }

  .border-l-#{$i} {
    border-left-width: #{$i}px;
  }
}
